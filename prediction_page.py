# -*- coding: utf-8 -*-
"""
@author: methusha
"""

import streamlit as st
import pickle
import numpy as np

def load_model():
    with open('saved_steps.pkl', 'rb') as file:
        data = pickle.load(file)
    return data

data = load_model()

RF_loaded = data["model"]
label_encoder_loaded = data["label_encoder"]

def show_predict_page():
    
    st.title("Heart Disease Prediction")
    
    
    sexes = ("M", "F")
    chest_pain_types = ("ATA", "NAP", "ASY", "TA")
    resting_ECGs = ("Normal", "ST", "LVH")
    exercise_anginas = ("Y", "N")
    ST_slopes = ("Up", "Flat", "Down")
    
    
    age = st.number_input("Age", min_value=0, max_value=200)
    sex = st.selectbox("Sex", sexes)
    chestPain = st.selectbox("Chest Pain Type", chest_pain_types)
    restingBP = st.number_input("Resting Blood Pressure [mm Hg]", min_value=0, max_value=999, value=0)
    cholestrol = st.number_input("Cholestrol [mm/dl]", min_value=0, max_value=999, value=0)
    fastingBS = st.number_input("Fasting Blood Sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]",
                                min_value=0, max_value=1, step=1)
    ecg = st.selectbox("Resting ECG", resting_ECGs)
    maxHR = st.number_input("Max Heart Rate [bpm]", min_value=0, max_value=999, value=0)
    angina = st.selectbox("Exercise Angina", exercise_anginas)
    oldPeak = st.number_input("Old Peak", min_value=-99.9, max_value=99.9, step=0.1, value=0.0)
    slope = st.selectbox("ST Slope", ST_slopes)
    
    determine_button = st.button("Predict Heart Disease")
    
    if determine_button:
        X = np.array([[age, sex, chestPain, restingBP, cholestrol, fastingBS, ecg, maxHR,
                       angina, oldPeak, slope]])
        
        X[:, 1] = label_encoder_loaded.fit_transform(X[:, 1])
        X[:, 2] = label_encoder_loaded.fit_transform(X[:, 2])
        X[:, 6] = label_encoder_loaded.fit_transform(X[:, 6])
        X[:, 8] = label_encoder_loaded.fit_transform(X[:, 8])
        X[:, 10] = label_encoder_loaded.fit_transform(X[:, 10])
        X = X.astype(float)
        
        heart_disease_prediction = RF_loaded.predict(X)
        
        if heart_disease_prediction[0] == 0:
            result = "There is a lower likelihood of heart disease."
        elif heart_disease_prediction[0] == 1:
            result = "There is a higher likelihood of heart disease."
        else:
            result = "Results inconclusive."
        
        st.subheader(result)
    
    st.write("")
    st.write("This program is designed to predict the likelihood of heart disease based on input features provided by the user. It is important to note that the predictions generated by this program are only predictions and should not be considered as a diagnosis.")
    st.write("This program relies on a machine learning algorithm developed with historical data curated nu medical doctors at the Hungarian Institute of Cardiology, University Hospital, V.A. Medical Center in Long Beach, and Cleveland Clinic Foundation. It is important to emphasize that the predictions it provides should not replace professional medical advice, diagnosis, or treatment.")
    st.write("The accuracy of predictions may vary, and false positives or false negatives can occur. This program is intended for informational purposes only and is not a substitute for professional medical judgment.")
    st.write("If you have specific health concerns or require medical advice, please consult a qualified healthcare professional.")